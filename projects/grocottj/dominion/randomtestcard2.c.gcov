        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2: * Author: Jonathan Grocott
        -:    3: * Description: Random test for the council_room card in dominion.c
        -:    4: * Date Created: 2/13/2018
        -:    5: *****************************************************************************/
        -:    6: 
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <time.h>
        -:   11:#include "rngs.h"
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "testTools.h"
        -:   15:#include "testTools.c"
        -:   16:
        -:   17://Bit to set the printf statements on/off
        -:   18:#define NOISY_TEST 1
        -:   19:
        -:   20:
function main called 1 returned 100% blocks executed 84%
        1:   21:int main (int argc, char** argv) {
        -:   22:	
        1:   23:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   24:	int numTests = 10000;
        1:   25:    int numQuestions = 0;
        1:   26:	int sum = numTests*numQuestions;
        -:   27:	
        -:   28:#if (NOISY_TEST == 1)
        1:   29:	printf("\n**************************\n");
call    0 returned 100%
        1:   30:    printf("TESTING COUNCILL ROOM CARD\n");
call    0 returned 100%
        1:   31:	printf("**************************\n");
call    0 returned 100%
        -:   32:#endif
        -:   33:
        -:   34:#if (NOISY_TEST == 1)
        1:   35:    printf("EXECUTING %d RANDOM TESTS......\n", sum);
call    0 returned 100%
        -:   36:#endif
        -:   37:
        -:   38:    
        1:   39:    int failures = 0;
    10001:   40:    for(int i = 0; i < numTests; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10000:   41:        int numplayers = rand() % (MAX_PLAYERS - 1) + 2; // Value between 2 and 4.
call    0 returned 100%
    10000:   42:        numQuestions += numplayers;
        -:   43:        struct gameState G;
        -:   44:		
    10000:   45:        int k[10] = {adventurer, gardens, embargo, village, steward, mine, cutpurse, sea_hag, tribute, smithy};
    10000:   46:        initializeGame(numplayers, k, rand(), &G);
call    0 returned 100%
call    1 returned 100%
        -:   47:
    10000:   48:        int player = rand() % numplayers;
call    0 returned 100%
    10000:   49:        G.whoseTurn = player;
        -:   50:        
        -:   51:		//set random numbers for inputs
    10000:   52:        int bonus = rand() % 50;
call    0 returned 100%
    10000:   53:        int choice1 = rand() % 50;
call    0 returned 100%
    10000:   54:        int choice2 = rand() % 50;
call    0 returned 100%
    10000:   55:        int choice3 = rand() % 50;
call    0 returned 100%
    10000:   56:        int handPos = rand() % MAX_HAND;
call    0 returned 100%
        -:   57:		
        -:   58:
        -:   59:		//original and copy of gamestate
        -:   60:        struct gameState orig;
    10000:   61:        memcpy(&orig, &G, sizeof(struct gameState));
        -:   62:
        -:   63:		//call council_room with randoms
    10000:   64:        cardEffect(council_room, choice1, choice2, choice3, &G, handPos, &bonus);
call    0 returned 100%
        -:   65:
    40012:   66:        for(int i = 0; i < numplayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
    30012:   67:            if(i == player){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   68:				//Testing if player1 hand count incremented by +3
    10000:   69:                if(G.handCount[i] != orig.handCount[i] + 3){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   70:					#if (NOISY_TEST == 1)
    #####:   71:                    printf("TEST FAILED: Player %d didn't get 3 more cards.\n", i);
call    0 never executed
        -:   72:                    #endif
    #####:   73:					failures++;
        -:   74:                }
        -:   75:            }else{
        -:   76:				//Testing if player draw +1 card 
    20012:   77:                if(G.handCount[i] != orig.handCount[i] + 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:					#if (NOISY_TEST == 1)
    #####:   79:                    printf("TEST FAILED: Player %d didn't draw 1 card.\n", i);
call    0 never executed
        -:   80:                    #endif
    #####:   81:					failures++;
        -:   82:                }
        -:   83:            }
        -:   84:			//Test that player gets +1 buys
    30012:   85:			if(G.numBuys != orig.numBuys + 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   86:					#if (NOISY_TEST == 1)
    #####:   87:                    printf("TEST FAILED: Player %d didn't get +1 buys.\n", i);
call    0 never executed
        -:   88:                    #endif
    #####:   89:					failures++;
        -:   90:                }
        -:   91:			
        -:   92:        }
        -:   93:    }
        -:   94:#if (NOISY_TEST == 1)
        1:   95:    printf(">>> %d of %d TESTS PASSED\n", numQuestions - failures, numQuestions);
call    0 returned 100%
        1:   96:	printf("**************************\n\n");
call    0 returned 100%
        -:   97:#endif
        -:   98:}
