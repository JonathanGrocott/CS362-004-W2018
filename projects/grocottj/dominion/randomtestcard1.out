File 'randomtestcard1.c'
Lines executed:66.67% of 21
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:58.82% of 17
Creating 'randomtestcard1.c.gcov'

File 'testTools.c'
Lines executed:29.01% of 131
Branches executed:19.67% of 122
Taken at least once:14.75% of 122
Calls executed:72.73% of 22
Creating 'testTools.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2: * Author: Jonathan Grocott
        -:    3: * Description: Random test for the smithy card in dominion.c
        -:    4: * Date Created: 2/13/2018
        -:    5: *****************************************************************************/
        -:    6: 
        -:    7:#include <stdlib.h>
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <time.h>
        -:   11:#include <string.h>
        -:   12:#include "dominion_helpers.h"
        -:   13:#include "rngs.h"
        -:   14:#include "testTools.h"
        -:   15:#include "testTools.c"
        -:   16:
        -:   17:
        -:   18://Bit to set the printf statements on/off
        -:   19:#define NOISY_TEST 1
        -:   20:
        -:   21:
function main called 1 returned 100% blocks executed 70%
        1:   22:int main() {
        -:   23:    
        1:   24:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   25:    struct errors e = {0};
        -:   26:
        -:   27:#if (NOISY_TEST == 1)
        1:   28:	printf("\n**************************\n");
call    0 returned 100%
        1:   29:    printf("TESTING SMITHY CARD\n");
call    0 returned 100%
        1:   30:	printf("**************************\n");
call    0 returned 100%
        1:   31:	printf("EXECUTING %d RANDOM TESTS....\n", NUMTESTS);
call    0 returned 100%
        -:   32:#endif
        -:   33:	//For each test randomize the game state and test
    10001:   34:    for (int i = 0; i < NUMTESTS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   35:		struct gameState state;
    10000:   36:		randomizeGameState(&state);
call    0 returned 100%
    10000:   37:		engine_testSmithy(&state, &e);
call    0 returned 100%
        -:   38:    }
        -:   39:
        -:   40:	//If there are failures print them
        1:   41:    if (e.metric1 + e.metric2 + e.metric3 + e.metric4 + e.metric5 > 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   42:		#if (NOISY_TEST == 1)
    #####:   43:			printf("\nTESTS FAILED, Details Below\n");
call    0 never executed
    #####:   44:			printf("\n*****ERROR RATES*****\n");
call    0 never executed
    #####:   45:			printf("PLAYER CARD COUNT: %.2f%%\n", e.metric1 * 1.0 / NUMTESTS * 100);
call    0 never executed
    #####:   46:			printf("PLAYER HAND COUNT: %.2f%%\n", e.metric2 * 1.0 / NUMTESTS * 100);
call    0 never executed
    #####:   47:			printf("DECK COUNT: %.2f%%\n", e.metric3 * 1.0 / NUMTESTS * 100);
call    0 never executed
    #####:   48:			printf("OPPONENT CARD COUNT: %.2f%%\n", e.metric4 * 1.0 / NUMTESTS * 100);
call    0 never executed
    #####:   49:			printf("**************************\n\n");
call    0 never executed
        -:   50:		#endif
        -:   51:	}
        -:   52:    else{
        -:   53:		//If no failures print all tests passed 
        -:   54:		#if (NOISY_TEST == 1)
        1:   55:		printf(">>> ALL %d TESTS PASSED\n", NUMTESTS);
call    0 returned 100%
        1:   56:		printf("**************************\n\n");
call    0 returned 100%
        -:   57:		#endif
        -:   58:	}
        -:   59:		
        1:   60:    return 0;
        -:   61:}
File 'dominion.c'
Lines executed:24.91% of 574
Creating 'dominion.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:0.00% of 5
Creating 'stdio.h.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   627648:    8:int compare(const void* a, const void* b) {
   627648:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   627648:   11:  if (*(int*)a < *(int*)b)
   149440:   12:    return -1;
   478208:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    10000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10000:   44:  SelectStream(1);
    10000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   110000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1100000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10000:   73:  if (numPlayers == 2)
        -:   74:    {
     3393:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     6607:   77:  else if (numPlayers == 3)
        -:   78:    {
     3326:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     3281:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10000:   87:  if (numPlayers == 2)
        -:   88:    {
     3393:   89:      state->supplyCount[estate] = 8;
     3393:   90:      state->supplyCount[duchy] = 8;
     3393:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     6607:   95:      state->supplyCount[estate] = 12;
     6607:   96:      state->supplyCount[duchy] = 12;
     6607:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10000:  102:  state->supplyCount[silver] = 40;
    10000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   210000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1650000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1550000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   100000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    20000:  115:		  if (numPlayers == 2){ 
     3393:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     6607:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    90000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   100000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1450000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    39888:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    29888:  140:      state->deckCount[i] = 0;
   119552:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    89664:  143:	  state->deck[i][j] = estate;
    89664:  144:	  state->deckCount[i]++;
        -:  145:	}
   239104:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   209216:  148:	  state->deck[i][j] = copper;
   209216:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    39888:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    29888:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    39888:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    29888:  166:      state->handCount[i] = 0;
    29888:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   280000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   270000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    10000:  182:  state->outpostPlayed = 0;
    10000:  183:  state->phase = 0;
    10000:  184:  state->numActions = 1;
    10000:  185:  state->numBuys = 1;
    10000:  186:  state->playedCardCount = 0;
    10000:  187:  state->whoseTurn = 0;
    10000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    60000:  192:  for (it = 0; it < 5; it++){
    50000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    10000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    10000:  198:  return 0;
        -:  199:}
        -:  200:
    29888:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    29888:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    29888:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    29888:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   358656:  214:  while (state->deckCount[player] > 0) {
   298880:  215:    card = floor(Random() * state->deckCount[player]);
   298880:  216:    newDeck[newDeckPos] = state->deck[player][card];
   298880:  217:    newDeckPos++;
   983492:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   684612:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   298880:  221:    state->deckCount[player]--;
        -:  222:  }
   328768:  223:  for (i = 0; i < newDeckPos; i++) {
   298880:  224:    state->deck[player][i] = newDeck[i];
   298880:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    29888:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    20000:  346:int whoseTurn(struct gameState *state) {
    20000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   107359:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   107359:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   107359:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   107359:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   107359:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   107359:  576:    state->deckCount[player]--;
   107359:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   107359:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int council_roomCall(struct gameState *state, int currentPlayer, int handPos){
        -:  647:	//+4 Cards
    #####:  648:	int i =0;
    #####:  649:      for (i = 0; i < 4; i++)
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
        -:  652:	}
        -:  653:			
        -:  654:      //+1 Buy
    #####:  655:      state->numBuys++;
        -:  656:			
        -:  657:      //Each other player draws a card
    #####:  658:      for (i = 0; i < state->numPlayers; i++)
        -:  659:	{
    #####:  660:	  if ( i != currentPlayer )
        -:  661:	    {
    #####:  662:	      drawCard(i, state);
        -:  663:	    }
        -:  664:	}
        -:  665:			
        -:  666:      //put played card in played card pile
    #####:  667:      discardCard(handPos, currentPlayer, state, 0);
        -:  668:			
    #####:  669:      return 0;
        -:  670:}
        -:  671:
    10000:  672:int smithyCall(struct gameState *state, int currentPlayer, int handPos){
        -:  673://BUG on line 652
        -:  674:
        -:  675://+3 Cards
        -:  676://int currentPlayer = whoseTurn(state);
        -:  677:
    40000:  678:      for (int i = 0; i < 3; i++) //BUG inserted here - draws 4 cards not 3
        -:  679:	{
    30000:  680:	  drawCard(currentPlayer, state);
        -:  681:	}
        -:  682:			
        -:  683:      //discard card from hand
    10000:  684:      discardCard(handPos, currentPlayer, state, 0);
    10000:  685:      return 0;
        -:  686:	
        -:  687:}	
        -:  688:
    #####:  689:int villageCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  690://BUG on line 672 
        -:  691:	
        -:  692:	//+1 Card
    #####:  693:	int currentPlayer = whoseTurn(state);
    #####:  694:      drawCard(currentPlayer, state);
        -:  695:			
        -:  696:      //+2 Actions
    #####:  697:      state->numActions = state->numActions + 1; //BUG inserted here - adds one action not 2
        -:  698:			
        -:  699:      //discard played card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:      return 0;
        -:  702:	
        -:  703:}
        -:  704:
    10000:  705:int adventurerCall(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z){
        -:  706://BUG on line 700 
        -:  707:	
    47359:  708:	while(drawntreasure<2){
    27359:  709:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  710:		  shuffle(currentPlayer, state);
        -:  711:		}
    27359:  712:		drawCard(currentPlayer, state);
    27359:  713:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    27359:  714:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
    20000:  715:		  drawntreasure++;
        -:  716:		}
        -:  717:		else{
     7359:  718:		  temphand[z]=cardDrawn;
     7359:  719:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     7359:  720:		  z++; //BUG inserted here - does not index the counter 
        -:  721:
        -:  722:		}
        -:  723:      }
    27359:  724:      while(z-1>=0){
     7359:  725:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     7359:  726:		z=z-1;
        -:  727:      }
    10000:  728:      return 0;
        -:  729:}
        -:  730:
    #####:  731:int mineCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  732://BUG on line 727 
        -:  733:	
        -:  734:	int j;
    #####:  735:	int currentPlayer = whoseTurn(state);
        -:  736:	
    #####:  737:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) //BUG inserted here - checks price by 2 instead of 3
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
        -:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:}
        -:  771:
    #####:  772:int baronCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
    #####:  773:	int currentPlayer = whoseTurn(state);
    #####:  774:	state->numBuys++;//Increase buys by 1!
    #####:  775:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  776:	int p = 0;//Iterator for hand!
    #####:  777:	int card_not_discarded = 1;//Flag for discard set!
    #####:  778:	while(card_not_discarded){
    #####:  779:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  780:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  781:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  782:	    state->discardCount[currentPlayer]++;
    #####:  783:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  784:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  785:	    }
    #####:  786:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  787:	    state->handCount[currentPlayer]--;
    #####:  788:	    card_not_discarded = 0;//Exit the loop
        -:  789:	  }
    #####:  790:	  else if (p > state->handCount[currentPlayer]){
        -:  791:	    if(DEBUG) {
        -:  792:	      printf("No estate cards in your hand, invalid choice\n");
        -:  793:	      printf("Must gain an estate if there are any\n");
        -:  794:	    }
    #####:  795:	    if (supplyCount(estate, state) > 0){
    #####:  796:	      gainCard(estate, state, 0, currentPlayer);
    #####:  797:	      state->supplyCount[estate]--;//Decrement estates
    #####:  798:	      if (supplyCount(estate, state) == 0){
    #####:  799:		isGameOver(state);
        -:  800:	      }
        -:  801:	    }
    #####:  802:	    card_not_discarded = 0;//Exit the loop
        -:  803:	  }
        -:  804:			    
        -:  805:	  else{
    #####:  806:	    p++;//Next card
        -:  807:	  }
        -:  808:	}
        -:  809:      }
        -:  810:			    
        -:  811:      else{
    #####:  812:	if (supplyCount(estate, state) > 0){
    #####:  813:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  814:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  815:	  if (supplyCount(estate, state) == 0){
    #####:  816:	    isGameOver(state);
        -:  817:	  }
        -:  818:	}
        -:  819:      }
        -:  820:	    
        -:  821:      
    #####:  822:      return 0;
        -:  823:}
        -:  824:
    #####:  825:int ambassadorCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
    #####:  826:	int j = 0;		//used to check if player has enough cards to discard
    #####:  827:	int currentPlayer = whoseTurn(state);
    #####:  828:      if (choice2 > 2 || choice2 < 0)
        -:  829:	{
    #####:  830:	  return -1;				
        -:  831:	}
        -:  832:
    #####:  833:      if (choice1 == handPos)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  839:	{
    #####:  840:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  841:	    {
    #####:  842:	      j++;
        -:  843:	    }
        -:  844:	}
    #####:  845:      if (j < choice2)
        -:  846:	{
    #####:  847:	  return -1;				
        -:  848:	}
        -:  849:
        -:  850:      if (DEBUG) 
        -:  851:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  852:
        -:  853:      //increase supply count for choosen card by amount being discarded
    #####:  854:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  855:			
        -:  856:      //each other player gains a copy of revealed card
    #####:  857:      for (int i = 0; i < state->numPlayers; i++)
        -:  858:	{
    #####:  859:	  if (i != currentPlayer)
        -:  860:	    {
    #####:  861:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  862:	    }
        -:  863:	}
        -:  864:
        -:  865:      //discard played card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);			
        -:  867:
        -:  868:      //trash copies of cards returned to supply
    #####:  869:      for (int j = 0; j < choice2; j++)
        -:  870:	{
    #####:  871:	  for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  872:	    {
    #####:  873:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  874:		{
    #####:  875:		  discardCard(i, currentPlayer, state, 1);
    #####:  876:		  break;
        -:  877:		}
        -:  878:	    }
        -:  879:	}			
        -:  880:
    #####:  881:      return 0;
        -:  882:}
        -:  883:
    20000:  884:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  885:{
        -:  886:  int i;
        -:  887:  int j;
        -:  888:  int k;
        -:  889:  int x;
        -:  890:  int index;
    20000:  891:  int currentPlayer = whoseTurn(state);
    20000:  892:  int nextPlayer = currentPlayer + 1;
        -:  893:
    20000:  894:  int tributeRevealedCards[2] = {-1, -1};
        -:  895:  int temphand[MAX_HAND];// moved above the if statement
    20000:  896:  int drawnTreasure=0;
    20000:  897:  int cardDrawn=0;
    20000:  898:  int z = 0;// this is the counter for the temp hand
        -:  899:
        -:  900:  
    20000:  901:  if (nextPlayer > (state->numPlayers - 1)){
     7679:  902:    nextPlayer = 0;
        -:  903:  }
        -:  904:  
        -:  905:	
        -:  906:  //uses switch to select card and perform actions
    20000:  907:  switch( card ) 
        -:  908:    {
        -:  909:    case adventurer:
    10000:  910:      adventurerCall(state, currentPlayer, drawnTreasure, cardDrawn, temphand, z);
    10000:  911:	  break;
        -:  912:    case council_room:
    #####:  913:      council_roomCall(state, currentPlayer, handPos); //refactored during cardtest1 
    #####:  914:        break;
        -:  915:			
        -:  916:    case feast:
        -:  917:      //gain card with cost up to 5
        -:  918:      //Backup hand
    #####:  919:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  920:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  921:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  922:      }
        -:  923:      //Backup hand
        -:  924:
        -:  925:      //Update Coins for Buy
    #####:  926:      updateCoins(currentPlayer, state, 5);
    #####:  927:      x = 1;//Condition to loop on
    #####:  928:      while( x == 1) {//Buy one card
    #####:  929:	if (supplyCount(choice1, state) <= 0){
        -:  930:	  if (DEBUG)
        -:  931:	    printf("None of that card left, sorry!\n");
        -:  932:
        -:  933:	  if (DEBUG){
        -:  934:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  935:	  }
        -:  936:	}
    #####:  937:	else if (state->coins < getCost(choice1)){
    #####:  938:	  printf("That card is too expensive!\n");
        -:  939:
        -:  940:	  if (DEBUG){
        -:  941:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  942:	  }
        -:  943:	}
        -:  944:	else{
        -:  945:
        -:  946:	  if (DEBUG){
        -:  947:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  948:	  }
        -:  949:
    #####:  950:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  951:	  x = 0;//No more buying cards
        -:  952:
        -:  953:	  if (DEBUG){
        -:  954:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  955:	  }
        -:  956:
        -:  957:	}
        -:  958:      }     
        -:  959:
        -:  960:      //Reset Hand
    #####:  961:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  962:	state->hand[currentPlayer][i] = temphand[i];
    #####:  963:	temphand[i] = -1;
        -:  964:      }
        -:  965:      //Reset Hand
        -:  966:      			
    #####:  967:      return 0;
        -:  968:			
        -:  969:    case gardens:
    #####:  970:      return -1;
        -:  971:			
        -:  972:    case mine:
    #####:  973:		mineCall(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  974:      
        -:  975:			
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case smithy:
    10000: 1003:		smithyCall(state, currentPlayer, handPos); //refactored during cardtest1 
    10000: 1004:        break;
        -: 1005:		
        -: 1006:    case village:
    #####: 1007:		villageCall(card, choice1, choice2, choice3, state, handPos, bonus);
    #####: 1008:        break;
        -: 1009:		
        -: 1010:    case baron:
    #####: 1011:		baronCall(card, choice1, choice2, choice3, state, handPos, bonus);
    #####: 1012:        break;
        -: 1013:		
        -: 1014:    case great_hall:
        -: 1015:      //+1 Card
    #####: 1016:      drawCard(currentPlayer, state);
        -: 1017:			
        -: 1018:      //+1 Actions
    #####: 1019:      state->numActions++;
        -: 1020:			
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case minion:
        -: 1026:      //+1 action
    #####: 1027:      state->numActions++;
        -: 1028:			
        -: 1029:      //discard card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);
        -: 1031:			
    #####: 1032:      if (choice1)		//+2 coins
        -: 1033:	{
    #####: 1034:	  state->coins = state->coins + 2;
        -: 1035:	}
        -: 1036:			
    #####: 1037:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1038:	{
        -: 1039:	  //discard hand
    #####: 1040:	  while(numHandCards(state) > 0)
        -: 1041:	    {
    #####: 1042:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1043:	    }
        -: 1044:				
        -: 1045:	  //draw 4
    #####: 1046:	  for (i = 0; i < 4; i++)
        -: 1047:	    {
    #####: 1048:	      drawCard(currentPlayer, state);
        -: 1049:	    }
        -: 1050:				
        -: 1051:	  //other players discard hand and redraw if hand size > 4
    #####: 1052:	  for (i = 0; i < state->numPlayers; i++)
        -: 1053:	    {
    #####: 1054:	      if (i != currentPlayer)
        -: 1055:		{
    #####: 1056:		  if ( state->handCount[i] > 4 )
        -: 1057:		    {
        -: 1058:		      //discard hand
    #####: 1059:		      while( state->handCount[i] > 0 )
        -: 1060:			{
    #####: 1061:			  discardCard(handPos, i, state, 0);
        -: 1062:			}
        -: 1063:							
        -: 1064:		      //draw 4
    #####: 1065:		      for (j = 0; j < 4; j++)
        -: 1066:			{
    #####: 1067:			  drawCard(i, state);
        -: 1068:			}
        -: 1069:		    }
        -: 1070:		}
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case steward:
    #####: 1077:      if (choice1 == 1)
        -: 1078:	{
        -: 1079:	  //+2 cards
    #####: 1080:	  drawCard(currentPlayer, state);
    #####: 1081:	  drawCard(currentPlayer, state);
        -: 1082:	}
    #####: 1083:      else if (choice1 == 2)
        -: 1084:	{
        -: 1085:	  //+2 coins
    #####: 1086:	  state->coins = state->coins + 2;
        -: 1087:	}
        -: 1088:      else
        -: 1089:	{
        -: 1090:	  //trash 2 cards in hand
    #####: 1091:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1092:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1093:	}
        -: 1094:			
        -: 1095:      //discard card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case tribute:
    #####: 1100:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1101:	if (state->deckCount[nextPlayer] > 0){
    #####: 1102:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1103:	  state->deckCount[nextPlayer]--;
        -: 1104:	}
    #####: 1105:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1106:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1107:	  state->discardCount[nextPlayer]--;
        -: 1108:	}
        -: 1109:	else{
        -: 1110:	  //No Card to Reveal
        -: 1111:	  if (DEBUG){
        -: 1112:	    printf("No cards to reveal\n");
        -: 1113:	  }
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
        -: 1117:      else{
    #####: 1118:	if (state->deckCount[nextPlayer] == 0){
    #####: 1119:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1120:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1121:	    state->deckCount[nextPlayer]++;
    #####: 1122:	    state->discard[nextPlayer][i] = -1;
    #####: 1123:	    state->discardCount[nextPlayer]--;
        -: 1124:	  }
        -: 1125:			    
    #####: 1126:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1127:	} 
    #####: 1128:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1129:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1130:	state->deckCount[nextPlayer]--;
    #####: 1131:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1132:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1133:	state->deckCount[nextPlayer]--;
        -: 1134:      }    
        -: 1135:		       
    #####: 1136:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1137:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1138:	state->playedCardCount++;
    #####: 1139:	tributeRevealedCards[1] = -1;
        -: 1140:      }
        -: 1141:
    #####: 1142:      for (i = 0; i <= 2; i ++){
    #####: 1143:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1144:	  state->coins += 2;
        -: 1145:	}
        -: 1146:		    
    #####: 1147:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1148:	  drawCard(currentPlayer, state);
    #####: 1149:	  drawCard(currentPlayer, state);
        -: 1150:	}
        -: 1151:	else{//Action Card
    #####: 1152:	  state->numActions = state->numActions + 2;
        -: 1153:	}
        -: 1154:      }
        -: 1155:	    
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case ambassador:
    #####: 1159:		ambassadorCall(card, choice1, choice2, choice3, state, handPos, bonus);
    #####: 1160:		break;
        -: 1161:      
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
        -: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    20000: 1280:  return -1;
        -: 1281:}
        -: 1282:
    10000: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
    10000: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
    10000: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    10000: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
    10000: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
    10000: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
    10000: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
    10000: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
    10000: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
    10000: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
    10000: 1318:  return 0;
        -: 1319:}
        -: 1320:
    #####: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
    #####: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
    #####: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
    #####: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
    #####: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
    #####: 1355:  return 0;
        -: 1356:}
        -: 1357:
    10000: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
    10000: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
    60000: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
    50000: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
    35551: 1370:	  state->coins += 1;
        -: 1371:	}
    14449: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
    14449: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
    10000: 1383:  state->coins += bonus;
        -: 1384:
    10000: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
        -: 1390:
File 'dominion.c'
Lines executed:24.91% of 574
Branches executed:26.62% of 417
Taken at least once:18.23% of 417
Calls executed:12.87% of 101
Creating 'dominion.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 1
Creating 'stdio.h.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 627648 returned 100% blocks executed 83%
   627648:    8:int compare(const void* a, const void* b) {
   627648:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
   627648:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
   149440:   12:    return -1;
   478208:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10000 returned 100% blocks executed 95%
    10000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10000:   44:  SelectStream(1);
call    0 returned 100%
    10000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    10000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   110000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  1100000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  1000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10000:   73:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   74:    {
     3393:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     6607:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
     3326:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     3281:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10000:   87:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   88:    {
     3393:   89:      state->supplyCount[estate] = 8;
     3393:   90:      state->supplyCount[duchy] = 8;
     3393:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     6607:   95:      state->supplyCount[estate] = 12;
     6607:   96:      state->supplyCount[duchy] = 12;
     6607:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10000:  102:  state->supplyCount[silver] = 40;
    10000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   210000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  1650000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  1550000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   100000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
    20000:  115:		  if (numPlayers == 2){ 
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
     3393:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     6607:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    90000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   100000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1450000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    39888:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    29888:  140:      state->deckCount[i] = 0;
   119552:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    89664:  143:	  state->deck[i][j] = estate;
    89664:  144:	  state->deckCount[i]++;
        -:  145:	}
   239104:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   209216:  148:	  state->deck[i][j] = copper;
   209216:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    39888:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
    29888:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    39888:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    29888:  166:      state->handCount[i] = 0;
    29888:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   280000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   270000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    10000:  182:  state->outpostPlayed = 0;
    10000:  183:  state->phase = 0;
    10000:  184:  state->numActions = 1;
    10000:  185:  state->numBuys = 1;
    10000:  186:  state->playedCardCount = 0;
    10000:  187:  state->whoseTurn = 0;
    10000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    60000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    50000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    10000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    10000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 29888 returned 100% blocks executed 94%
    29888:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    29888:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    29888:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
    29888:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   358656:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   298880:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   298880:  216:    newDeck[newDeckPos] = state->deck[player][card];
   298880:  217:    newDeckPos++;
   983492:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
   684612:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   298880:  221:    state->deckCount[player]--;
        -:  222:  }
   328768:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   298880:  224:    state->deck[player][i] = newDeck[i];
   298880:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    29888:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20000 returned 100% blocks executed 100%
    20000:  346:int whoseTurn(struct gameState *state) {
    20000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 107359 returned 100% blocks executed 38%
   107359:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   107359:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   107359:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   107359:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   107359:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   107359:  576:    state->deckCount[player]--;
   107359:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   107359:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function council_roomCall called 0 returned 0% blocks executed 0%
    #####:  646:int council_roomCall(struct gameState *state, int currentPlayer, int handPos){
        -:  647:	//+4 Cards
    #####:  648:	int i =0;
    #####:  649:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //+1 Buy
    #####:  655:      state->numBuys++;
        -:  656:			
        -:  657:      //Each other player draws a card
    #####:  658:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  659:	{
    #####:  660:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  661:	    {
    #####:  662:	      drawCard(i, state);
call    0 never executed
        -:  663:	    }
        -:  664:	}
        -:  665:			
        -:  666:      //put played card in played card pile
    #####:  667:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  668:			
    #####:  669:      return 0;
        -:  670:}
        -:  671:
function smithyCall called 10000 returned 100% blocks executed 100%
    10000:  672:int smithyCall(struct gameState *state, int currentPlayer, int handPos){
        -:  673://BUG on line 652
        -:  674:
        -:  675://+3 Cards
        -:  676://int currentPlayer = whoseTurn(state);
        -:  677:
    40000:  678:      for (int i = 0; i < 3; i++) //BUG inserted here - draws 4 cards not 3
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  679:	{
    30000:  680:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  681:	}
        -:  682:			
        -:  683:      //discard card from hand
    10000:  684:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    10000:  685:      return 0;
        -:  686:	
        -:  687:}	
        -:  688:
function villageCall called 0 returned 0% blocks executed 0%
    #####:  689:int villageCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  690://BUG on line 672 
        -:  691:	
        -:  692:	//+1 Card
    #####:  693:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  694:      drawCard(currentPlayer, state);
call    0 never executed
        -:  695:			
        -:  696:      //+2 Actions
    #####:  697:      state->numActions = state->numActions + 1; //BUG inserted here - adds one action not 2
        -:  698:			
        -:  699:      //discard played card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  701:      return 0;
        -:  702:	
        -:  703:}
        -:  704:
function adventurerCall called 10000 returned 100% blocks executed 93%
    10000:  705:int adventurerCall(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z){
        -:  706://BUG on line 700 
        -:  707:	
    47359:  708:	while(drawntreasure<2){
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
    27359:  709:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  710:		  shuffle(currentPlayer, state);
call    0 never executed
        -:  711:		}
    27359:  712:		drawCard(currentPlayer, state);
call    0 returned 100%
    27359:  713:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    27359:  714:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    20000:  715:		  drawntreasure++;
        -:  716:		}
        -:  717:		else{
     7359:  718:		  temphand[z]=cardDrawn;
     7359:  719:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     7359:  720:		  z++; //BUG inserted here - does not index the counter 
        -:  721:
        -:  722:		}
        -:  723:      }
    27359:  724:      while(z-1>=0){
branch  0 taken 42%
branch  1 taken 58% (fallthrough)
     7359:  725:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     7359:  726:		z=z-1;
        -:  727:      }
    10000:  728:      return 0;
        -:  729:}
        -:  730:
function mineCall called 0 returned 0% blocks executed 0%
    #####:  731:int mineCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  732://BUG on line 727 
        -:  733:	
        -:  734:	int j;
    #####:  735:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  736:	
    #####:  737:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) //BUG inserted here - checks price by 2 instead of 3
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  765:	      break;
        -:  766:	    }
        -:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:}
        -:  771:
function baronCall called 0 returned 0% blocks executed 0%
    #####:  772:int baronCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
    #####:  773:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  774:	state->numBuys++;//Increase buys by 1!
    #####:  775:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  776:	int p = 0;//Iterator for hand!
    #####:  777:	int card_not_discarded = 1;//Flag for discard set!
    #####:  778:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  779:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  780:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  781:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  782:	    state->discardCount[currentPlayer]++;
    #####:  783:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  784:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  785:	    }
    #####:  786:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  787:	    state->handCount[currentPlayer]--;
    #####:  788:	    card_not_discarded = 0;//Exit the loop
        -:  789:	  }
    #####:  790:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  791:	    if(DEBUG) {
        -:  792:	      printf("No estate cards in your hand, invalid choice\n");
        -:  793:	      printf("Must gain an estate if there are any\n");
        -:  794:	    }
    #####:  795:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  797:	      state->supplyCount[estate]--;//Decrement estates
    #####:  798:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  799:		isGameOver(state);
call    0 never executed
        -:  800:	      }
        -:  801:	    }
    #####:  802:	    card_not_discarded = 0;//Exit the loop
        -:  803:	  }
        -:  804:			    
        -:  805:	  else{
    #####:  806:	    p++;//Next card
        -:  807:	  }
        -:  808:	}
        -:  809:      }
        -:  810:			    
        -:  811:      else{
    #####:  812:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  814:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  815:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  816:	    isGameOver(state);
call    0 never executed
        -:  817:	  }
        -:  818:	}
        -:  819:      }
        -:  820:	    
        -:  821:      
    #####:  822:      return 0;
        -:  823:}
        -:  824:
function ambassadorCall called 0 returned 0% blocks executed 0%
    #####:  825:int ambassadorCall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
    #####:  826:	int j = 0;		//used to check if player has enough cards to discard
    #####:  827:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  828:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  829:	{
    #####:  830:	  return -1;				
        -:  831:	}
        -:  832:
    #####:  833:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  839:	{
    #####:  840:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  841:	    {
    #####:  842:	      j++;
        -:  843:	    }
        -:  844:	}
    #####:  845:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  846:	{
    #####:  847:	  return -1;				
        -:  848:	}
        -:  849:
        -:  850:      if (DEBUG) 
        -:  851:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  852:
        -:  853:      //increase supply count for choosen card by amount being discarded
    #####:  854:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  855:			
        -:  856:      //each other player gains a copy of revealed card
    #####:  857:      for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  858:	{
    #####:  859:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  860:	    {
    #####:  861:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  862:	    }
        -:  863:	}
        -:  864:
        -:  865:      //discard played card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  867:
        -:  868:      //trash copies of cards returned to supply
    #####:  869:      for (int j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  874:		{
    #####:  875:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  876:		  break;
        -:  877:		}
        -:  878:	    }
        -:  879:	}			
        -:  880:
    #####:  881:      return 0;
        -:  882:}
        -:  883:
function cardEffect called 20000 returned 100% blocks executed 7%
    20000:  884:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  885:{
        -:  886:  int i;
        -:  887:  int j;
        -:  888:  int k;
        -:  889:  int x;
        -:  890:  int index;
    20000:  891:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    20000:  892:  int nextPlayer = currentPlayer + 1;
        -:  893:
    20000:  894:  int tributeRevealedCards[2] = {-1, -1};
        -:  895:  int temphand[MAX_HAND];// moved above the if statement
    20000:  896:  int drawnTreasure=0;
    20000:  897:  int cardDrawn=0;
    20000:  898:  int z = 0;// this is the counter for the temp hand
        -:  899:
        -:  900:  
    20000:  901:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
     7679:  902:    nextPlayer = 0;
        -:  903:  }
        -:  904:  
        -:  905:	
        -:  906:  //uses switch to select card and perform actions
    20000:  907:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  908:    {
        -:  909:    case adventurer:
    10000:  910:      adventurerCall(state, currentPlayer, drawnTreasure, cardDrawn, temphand, z);
call    0 returned 100%
    10000:  911:	  break;
        -:  912:    case council_room:
    #####:  913:      council_roomCall(state, currentPlayer, handPos); //refactored during cardtest1 
call    0 never executed
    #####:  914:        break;
        -:  915:			
        -:  916:    case feast:
        -:  917:      //gain card with cost up to 5
        -:  918:      //Backup hand
    #####:  919:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  920:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  921:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  922:      }
        -:  923:      //Backup hand
        -:  924:
        -:  925:      //Update Coins for Buy
    #####:  926:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  927:      x = 1;//Condition to loop on
    #####:  928:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  929:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  930:	  if (DEBUG)
        -:  931:	    printf("None of that card left, sorry!\n");
        -:  932:
        -:  933:	  if (DEBUG){
        -:  934:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  935:	  }
        -:  936:	}
    #####:  937:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  938:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  939:
        -:  940:	  if (DEBUG){
        -:  941:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  942:	  }
        -:  943:	}
        -:  944:	else{
        -:  945:
        -:  946:	  if (DEBUG){
        -:  947:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  948:	  }
        -:  949:
    #####:  950:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  951:	  x = 0;//No more buying cards
        -:  952:
        -:  953:	  if (DEBUG){
        -:  954:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  955:	  }
        -:  956:
        -:  957:	}
        -:  958:      }     
        -:  959:
        -:  960:      //Reset Hand
    #####:  961:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  962:	state->hand[currentPlayer][i] = temphand[i];
    #####:  963:	temphand[i] = -1;
        -:  964:      }
        -:  965:      //Reset Hand
        -:  966:      			
    #####:  967:      return 0;
        -:  968:			
        -:  969:    case gardens:
    #####:  970:      return -1;
        -:  971:			
        -:  972:    case mine:
    #####:  973:		mineCall(card, choice1, choice2, choice3, state, handPos, bonus);
call    0 never executed
        -:  974:      
        -:  975:			
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case smithy:
    10000: 1003:		smithyCall(state, currentPlayer, handPos); //refactored during cardtest1 
call    0 returned 100%
    10000: 1004:        break;
        -: 1005:		
        -: 1006:    case village:
    #####: 1007:		villageCall(card, choice1, choice2, choice3, state, handPos, bonus);
call    0 never executed
    #####: 1008:        break;
        -: 1009:		
        -: 1010:    case baron:
    #####: 1011:		baronCall(card, choice1, choice2, choice3, state, handPos, bonus);
call    0 never executed
    #####: 1012:        break;
        -: 1013:		
        -: 1014:    case great_hall:
        -: 1015:      //+1 Card
    #####: 1016:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1017:			
        -: 1018:      //+1 Actions
    #####: 1019:      state->numActions++;
        -: 1020:			
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case minion:
        -: 1026:      //+1 action
    #####: 1027:      state->numActions++;
        -: 1028:			
        -: 1029:      //discard card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1031:			
    #####: 1032:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1033:	{
    #####: 1034:	  state->coins = state->coins + 2;
        -: 1035:	}
        -: 1036:			
    #####: 1037:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1038:	{
        -: 1039:	  //discard hand
    #####: 1040:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1041:	    {
    #####: 1042:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1043:	    }
        -: 1044:				
        -: 1045:	  //draw 4
    #####: 1046:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	    {
    #####: 1048:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1049:	    }
        -: 1050:				
        -: 1051:	  //other players discard hand and redraw if hand size > 4
    #####: 1052:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1053:	    {
    #####: 1054:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1055:		{
    #####: 1056:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1057:		    {
        -: 1058:		      //discard hand
    #####: 1059:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1060:			{
    #####: 1061:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1062:			}
        -: 1063:							
        -: 1064:		      //draw 4
    #####: 1065:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1066:			{
    #####: 1067:			  drawCard(i, state);
call    0 never executed
        -: 1068:			}
        -: 1069:		    }
        -: 1070:		}
        -: 1071:	    }
        -: 1072:				
        -: 1073:	}
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case steward:
    #####: 1077:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
        -: 1079:	  //+2 cards
    #####: 1080:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1081:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:	}
    #####: 1083:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //+2 coins
    #####: 1086:	  state->coins = state->coins + 2;
        -: 1087:	}
        -: 1088:      else
        -: 1089:	{
        -: 1090:	  //trash 2 cards in hand
    #####: 1091:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1092:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1093:	}
        -: 1094:			
        -: 1095:      //discard card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case tribute:
    #####: 1100:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1101:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1102:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1103:	  state->deckCount[nextPlayer]--;
        -: 1104:	}
    #####: 1105:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1106:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1107:	  state->discardCount[nextPlayer]--;
        -: 1108:	}
        -: 1109:	else{
        -: 1110:	  //No Card to Reveal
        -: 1111:	  if (DEBUG){
        -: 1112:	    printf("No cards to reveal\n");
        -: 1113:	  }
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
        -: 1117:      else{
    #####: 1118:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1119:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1120:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1121:	    state->deckCount[nextPlayer]++;
    #####: 1122:	    state->discard[nextPlayer][i] = -1;
    #####: 1123:	    state->discardCount[nextPlayer]--;
        -: 1124:	  }
        -: 1125:			    
    #####: 1126:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1127:	} 
    #####: 1128:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1129:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1130:	state->deckCount[nextPlayer]--;
    #####: 1131:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1132:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1133:	state->deckCount[nextPlayer]--;
        -: 1134:      }    
        -: 1135:		       
    #####: 1136:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1137:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1138:	state->playedCardCount++;
    #####: 1139:	tributeRevealedCards[1] = -1;
        -: 1140:      }
        -: 1141:
    #####: 1142:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1143:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1144:	  state->coins += 2;
        -: 1145:	}
        -: 1146:		    
    #####: 1147:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1149:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1150:	}
        -: 1151:	else{//Action Card
    #####: 1152:	  state->numActions = state->numActions + 2;
        -: 1153:	}
        -: 1154:      }
        -: 1155:	    
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case ambassador:
    #####: 1159:		ambassadorCall(card, choice1, choice2, choice3, state, handPos, bonus);
call    0 never executed
    #####: 1160:		break;
        -: 1161:      
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1180:			{
        -: 1181:			  if (DEBUG)
        -: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1241:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    20000: 1280:  return -1;
        -: 1281:}
        -: 1282:
function discardCard called 10000 returned 100% blocks executed 78%
    10000: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
    10000: 1287:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1288:    {
        -: 1289:      //add card to played pile
    10000: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    10000: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
    10000: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
    10000: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
    10000: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
    10000: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
    10000: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
    10000: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
    10000: 1318:  return 0;
        -: 1319:}
        -: 1320:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1326:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
    #####: 1336:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
    #####: 1341:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
    #####: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
    #####: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
    #####: 1355:  return 0;
        -: 1356:}
        -: 1357:
function updateCoins called 10000 returned 100% blocks executed 82%
    10000: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
    10000: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
    60000: 1366:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1367:    {
    50000: 1368:      if (state->hand[player][i] == copper)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1369:	{
    35551: 1370:	  state->coins += 1;
        -: 1371:	}
    14449: 1372:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
    14449: 1376:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
    10000: 1383:  state->coins += bonus;
        -: 1384:
    10000: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
        -: 1390:
