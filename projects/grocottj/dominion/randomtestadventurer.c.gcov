        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2: * Author: Jonathan Grocott
        -:    3: * Description: Random test for the adventurer card in dominion.c
        -:    4: * Date Created: 2/12/2018
        -:    5: *****************************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <stdlib.h>
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <time.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15://Bit to set the printf statements on/off
        -:   16:#define NOISY_TEST 1
        -:   17:
        -:   18:
        1:   19:int main (int argc, char** argv) {
        -:   20:
        1:   21:    srand(time(NULL));
        1:   22:	int numTests = 10000; //change back to 1000
        1:   23:    int NUMQUESTIONS = 3;
        -:   24:
        -:   25:#if (NOISY_TEST == 1)
        1:   26:	printf("\n**************************\n");
        1:   27:    printf("TESTING ADVENTURER CARD\n");
        1:   28:	printf("**************************\n");
        -:   29:#endif
        -:   30:	
        -:   31:#if (NOISY_TEST == 1)
        1:   32:    printf("EXECUTING RANDOM TESTS......\n");
        -:   33:#endif
        -:   34:
        -:   35:
        1:   36:    int failures = 0;
    10001:   37:    for(int i = 0; i < numTests; i++){
    10000:   38:        int numplayers = rand() % (MAX_PLAYERS - 1) + 2; // Value between 2 and 4.
        -:   39:        struct gameState G;
    10000:   40:        int k[10] = {adventurer, gardens, embargo, village, steward, mine, cutpurse, sea_hag, tribute, smithy};
        -:   41:
    10000:   42:        initializeGame(numplayers, k, rand(), &G);
        -:   43:
    10000:   44:        int player = rand() % numplayers;
    10000:   45:        G.whoseTurn = player;
        -:   46:        
        -:   47:		//set random numbers for inputs
    10000:   48:        int bonus = rand() % 50;
    10000:   49:        int choice1 = rand() % 50;
    10000:   50:        int choice2 = rand() % 50;
    10000:   51:        int choice3 = rand() % 50;
    10000:   52:        int handPos = rand() % MAX_HAND;
        -:   53:
        -:   54:		//original and copy of gamestate
        -:   55:        struct gameState orig;
    10000:   56:        memcpy(&orig, &G, sizeof(struct gameState));
        -:   57:
        -:   58:		//call adventurer with randoms
    10000:   59:        cardEffect(adventurer, choice1, choice2, choice3, &G, handPos, &bonus);
        -:   60:
        -:   61:		//Testing if hand count incremented by +2
    10000:   62:        if(G.handCount[player] != (orig.handCount[player] + 2)){
        -:   63:            #if (NOISY_TEST == 1)
    #####:   64:			printf("TEST FAILED: Player %d didn't draw 2 cards.\n", player);
        -:   65:            #endif
    #####:   66:			failures++;
        -:   67:        }
        -:   68:
        -:   69:		//Testing if players newest/top card drawn is copper, silver or gold
    10000:   70:        int cardDrawn1 = G.hand[player][G.handCount[player] - 1];//top card 
    10000:   71:        if(cardDrawn1 != copper && cardDrawn1 != silver && cardDrawn1 != gold){
        -:   72:            #if (NOISY_TEST == 1)
    #####:   73:			printf("TEST FAILED: Player %d's newest card isn't Copper/Silver/Gold.\n", player);
        -:   74:            #endif
    #####:   75:			failures++;
        -:   76:        }
        -:   77:
        -:   78:		//Testing if players second newest card is copper, silver or gold
    10000:   79:        int cardDrawn2 = G.hand[player][G.handCount[player] - 2];
    10000:   80:        if(cardDrawn2 != copper && cardDrawn2 != silver && cardDrawn2 != gold){
        -:   81:            #if (NOISY_TEST == 1)
    #####:   82:			printf("TEST FAILED: Player %d's second newest card isn't Copper/Silver/Gold.\n", player);
        -:   83:            #endif
    #####:   84:			failures++;
        -:   85:        }
        -:   86:		
        -:   87:    }
        -:   88:	
        -:   89:#if (NOISY_TEST == 1)
        1:   90:    printf(">>> %d of %d TESTS PASSED\n\n", numTests * NUMQUESTIONS - failures, numTests * NUMQUESTIONS);
        -:   91:#endif
        -:   92:
        -:   93:}
