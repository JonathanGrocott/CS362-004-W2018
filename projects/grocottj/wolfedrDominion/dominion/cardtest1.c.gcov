        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2: * Author: Jonathan Grocott
        -:    3: * Description: Unit tests for the smithy cardEffect function in dominion.c. 
        -:    4: * File Name: cardtest1.c
        -:    5: * Date Created: 1/29/2018
        -:    6: *****************************************************************************/
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <string.h>
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include "rngs.h"
        -:   14:#include "interface.h"
        -:   15:#include "testTools.c"
        -:   16:
        1:   17:int main() {
        -:   18:	struct gameState state,	stateOriginal;	// backup copy of game to detect changes
        1:   19:	int i = 0, j = 0,						// iteration variable for loop counting
        1:   20:		numPlayers = 2,				// number of players in game
        1:   21:		randomSeed = 10000,			// seed for random generation
        1:   22:		validationCheck = 1,		// used to determine P/F
        1:   23:		found = 0;					// detects if card found in deck
        -:   24:		
        1:   25:		int failure = 0; 
        -:   26:	// Setup initial array of kingdom cards
        1:   27:	int kingdomCards[10] = {adventurer, gardens, village, minion, mine, cutpurse,
        -:   28:							sea_hag, remodel, smithy};
        -:   29:	
        -:   30:	// Initializing game and backup copy of game
        1:   31:	initializeGame(numPlayers, kingdomCards, randomSeed, &state);
        -:   32:
        -:   33:	// PERFORMING OPERATIONS TO MEET TEST CONDITION
        1:   34:	state.hand[state.whoseTurn][0] = smithy;
        1:   35:	memcpy(&stateOriginal, &state, sizeof(struct gameState));
        -:   36:
        -:   37:	// DISPLAY
        1:   38:	printf("\n-----------------------------------------");
        1:   39:    printf("\n--------Testing smithyCall()----------\n\n");
        1:   40:	printf("\n----Test #1: 3 valid cards added to current player hand----\n");
        -:   41:	
        -:   42:	//Refactored for drew wolfe dominion
        1:   43:	smithy_card(0, &state);
        -:   44:	//smithyCall(&state, 0);
        -:   45:	
        1:   46:	validationCheck = 1;
        9:   47:	for (i = 0; i < state.handCount[state.whoseTurn]; i++) {
        8:   48:		if (state.hand[state.whoseTurn][i] != stateOriginal.hand[state.whoseTurn][i]) {
        4:   49:			if (state.hand[state.whoseTurn][i] == -1) {
    #####:   50:				validationCheck = 0;
    #####:   51:				failure++; 
        -:   52:			}
        -:   53:		}
        -:   54:	}
        -:   55:	// Ensure top card is valid selection
        1:   56:	if (state.hand[state.whoseTurn][stateOriginal.handCount[state.whoseTurn] + 1] == -1){
    #####:   57:		validationCheck = 0;
    #####:   58:		failure++;
        -:   59:	}
        -:   60:	// Ensure card after top card is -1
        1:   61:	if (state.hand[state.whoseTurn][stateOriginal.handCount[state.whoseTurn] + 2] != -1){
        1:   62:		validationCheck = 0;
        1:   63:		failure++;
        -:   64:	}
        1:   65:	printTestResult(validationCheck, 3, 3);
        -:   66:
        1:   67:	printf("\n----Test #2: Current player hand count changed: 3 draws - 1 discard = 2----\n");
        1:   68:	validationCheck = 0;
        1:   69:	if (state.handCount[state.whoseTurn] != stateOriginal.handCount[state.whoseTurn] + 2){
        1:   70:		validationCheck = 0;
        1:   71:		failure++;
        -:   72:	}
        1:   73:	printTestResult(validationCheck, 2, 2);
        -:   74:
        1:   75:	printf("\n----Test #3: The smithy card is properly removed from the player hand----\n");
        1:   76:	validationCheck = 1;
        1:   77:	if (state.hand[state.whoseTurn][0] == smithy){
    #####:   78:		validationCheck = 0;
    #####:   79:		failure++;
        -:   80:	}
        1:   81:	printTestResult(validationCheck, 1, 0);
        -:   82:	
        1:   83:	printf("\n----Test #4: 3 cards	came from player's deck----\n");
        1:   84:	validationCheck = 1;
        9:   85:	for (i = 0; i < state.handCount[state.whoseTurn]; i++) {
        8:   86:		if (state.hand[state.whoseTurn][i] != stateOriginal.hand[state.whoseTurn][i]) {
        4:   87:			found = 0;
       24:   88:			for (j = 0; j < stateOriginal.deckCount[state.whoseTurn]; j++) {
       20:   89:				if (state.hand[state.whoseTurn][i] == stateOriginal.deck[state.whoseTurn][j]) {
       11:   90:					found = 1;
        -:   91:				}
        -:   92:			}
        4:   93:			if (found == 0){
    #####:   94:				validationCheck = 0;
    #####:   95:				failure++;
        -:   96:			}
        -:   97:		}
        -:   98:	}
        1:   99:	printTestResult(validationCheck, 1, 0);
        -:  100:
        1:  101:	printf("\n----Test #5: Player 2's decks were not modified----\n");
        1:  102:	validationCheck = 1;
        1:  103:	if (isHandSame(&state, &stateOriginal, state.whoseTurn + 1) != 1){
    #####:  104:		validationCheck = 0;
    #####:  105:		failure++;
        -:  106:	}
        1:  107:	if (isDeckSame(&state, &stateOriginal, state.whoseTurn + 1) != 1){
    #####:  108:		validationCheck = 0;
    #####:  109:		failure++;
        -:  110:	}
        1:  111:	if (isDiscardSame(&state, &stateOriginal, state.whoseTurn + 1) != 1){
    #####:  112:		validationCheck = 0;
    #####:  113:		failure++;
        -:  114:	}
        1:  115:	printTestResult(validationCheck, 1, 0);
        -:  116:
        1:  117:	printf("\n----Test #6: Game kingdom decks were not modified----\n");
        1:  118:	validationCheck = 1;
       29:  119:	for (i = 0; i < 28; i++) {
       28:  120:		if (state.supplyCount[i] != stateOriginal.supplyCount[i]){
    #####:  121:			validationCheck = 0;
    #####:  122:			failure++;
        -:  123:		}
        -:  124:	}
        1:  125:	printTestResult(validationCheck, 1, 1);
        -:  126:	
        1:  127:	if(failure == 0){
    #####:  128:		printf("\n\n\n >>>>>>ALL TESTS PASSED: smithyCall() \n\n\n");
        -:  129:	}
        -:  130:	else{
        1:  131:		printf("\n\n\n >>>>>>FAILURES IN SMITHY: %d \n\n\n", failure);
        -:  132:	}
        -:  133:	
        1:  134:	return 0;
        -:  135:}
